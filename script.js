// --- script.js ---
document.addEventListener('DOMContentLoaded', () => {

    // --- STATE MANAGEMENT (Client-Side) ---
    const state = {
        username: null,
        balance: 0.00,
        isAdmin: false,
        activeView: 'crash-view',
        isGameRunning: false, // This will be updated by server messages
    };

    // --- DOM ELEMENTS ---
    const loader = document.getElementById('loader-wrapper');
    const authModal = document.getElementById('auth-modal');
    const appWrapper = document.getElementById('app-wrapper');
    const usernameDisplay = document.getElementById('username-display');
    const balanceDisplay = document.getElementById('balance-display');
    const logoutButton = document.getElementById('logout-button');
    const navLinks = document.querySelectorAll('.nav-link');
    const gameViewsContainer = document.querySelector('.game-views');
    const activeGameTitle = document.getElementById('active-game-title');
    const chatMessages = document.getElementById('chat-messages');
    const chatInput = document.getElementById('chat-input');
    const chatSendBtn = document.getElementById('chat-send-btn');
    // ... (rest of your DOM elements)

    // --- AUTH MODAL ELEMENTS ---
    const loginView = document.getElementById('login-view');
    const registerView = document.getElementById('register-view');
    const showRegisterBtn = document.getElementById('show-register');
    const showLoginBtn = document.getElementById('show-login');
    const loginButton = document.getElementById('login-button');
    const registerButton = document.getElementById('register-button');
    const authError = document.getElementById('auth-error');


    // --- WebSocket Connection ---
    const ws = new WebSocket(`ws://${window.location.host}`);

    ws.onopen = () => {
        console.log('Connected to the server.');
    };

    ws.onmessage = (event) => {
        const data = JSON.parse(event.data);

        // This is the new heart of the client. It listens for server commands.
        switch(data.type) {
            case 'chat':
                addChatMessage(data.username, data.message);
                break;
            case 'crash_update':
                updateCrashView(data);
                break;
            // You can add more cases here for other games
            // case 'roulette_result': ...
            // case 'balance_update': updateBalance(data.newBalance); break;
        }
    };

    ws.onclose = () => {
        console.log('Disconnected from the server.');
        addChatMessage('SYSTEM', 'Connection lost. Please refresh.', 'system-message');
    };

    // --- GAME HTML TEMPLATES (with SVG Roulette) ---
    const gameTemplates = {
        'crash-view': `
            <div class="game-view" id="crash-view">
                <div class="game-controls">
                    <input type="number" id="crash-bet" placeholder="Bet amount" value="10">
                    <button id="crash-start-btn" class="btn btn-brand">Bet</button>
                    <button id="crash-cashout-btn" class="btn btn-danger" disabled>Cash Out</button>
                </div>
                <div class="game-display">
                    <div id="crash-chart"><span id="crash-multiplier">Waiting...</span></div>
                </div>
                <div class="game-result" id="crash-result"></div>
            </div>`,
        'roulette-view': `
            <div class="game-view" id="roulette-view">
                 <div class="game-controls">
                    <input type="number" id="roulette-bet" placeholder="Bet amount" value="10">
                    <button id="roulette-spin-btn" class="btn btn-brand">Spin</button>
                </div>
                <div class="game-display">
                    <div id="roulette-wheel-container">
                        <div id="roulette-pointer"></div>
                        <svg id="roulette-wheel" viewBox="0 0 200 200">
                           <!-- This SVG is generated by JavaScript now -->
                        </svg>
                    </div>
                </div>
                <div class="roulette-bets">
                    <button class="btn btn-danger" data-bet-type="red">RED (2x)</button>
                    <button class="btn btn-secondary" style="background: #222;" data-bet-type="black">BLACK (2x)</button>
                    <button class="btn btn-brand" data-bet-type="green">GREEN (14x)</button>
                </div>
                <div class="game-result" id="roulette-result"></div>
            </div>`,
        // ... (Paste your other game templates here)
        'mines-view': `<div class="game-view" id="mines-view"><h2>Coming Soon</h2><p>This game is being connected to the server.</p></div>`,
        'slots-view': `<div class="game-view" id="slots-view"><h2>Coming Soon</h2><p>This game is being connected to the server.</p></div>`,
        'blackjack-view': `<div class="game-view" id="blackjack-view"><h2>Coming Soon</h2><p>This game is being connected to the server.</p></div>`,
        'coinflip-view': `<div class="game-view" id="coinflip-view"><h2>Coming Soon</h2></div>`,
        'towers-view': `<div class="game-view" id="towers-view"><h2>Coming Soon</h2></div>`,
        'cases-view': `<div class="game-view" id="cases-view"><h2>Coming Soon</h2></div>`,
        'plinko-view': `<div class="game-view" id="plinko-view"><h2>Coming Soon</h2></div>`,
    };

    // --- CORE APP FUNCTIONS ---
    function init() {
        // Populate game views
        for (const viewId in gameTemplates) {
            gameViewsContainer.innerHTML += gameTemplates[viewId];
        }

        document.querySelectorAll('.game-view').forEach(view => view.classList.add('hidden'));
        document.getElementById(state.activeView).classList.remove('hidden');

        // Check for saved session/token in a real app, for now just show login
        setTimeout(() => {
            loader.classList.add('hidden');
            authModal.classList.remove('hidden');
        }, 1500);

        generateRouletteWheel(); // Generate the SVG roulette wheel
    }

    function successfulLogin(userData) {
        state.username = userData.username;
        state.balance = userData.balance;
        state.isAdmin = userData.isAdmin;

        usernameDisplay.textContent = state.username;
        updateBalanceDisplay();

        authModal.classList.add('hidden');
        appWrapper.classList.remove('hidden');

        if (state.isAdmin) {
            // adminPanelBtn.classList.remove('hidden');
        }
        
        addChatMessage('SYSTEM', `Welcome to Hex Casino, ${state.username}!`, 'system-message');
        
        initAllGames();
    }

    function logout() {
        // In a real app, you'd invalidate a session token on the server
        window.location.reload();
    }

    function updateBalance(amount, type = 'set') {
        const prevBalance = state.balance;
        if (type === 'add') state.balance += amount;
        else if (type === 'remove') state.balance -= amount;
        else state.balance = amount;
        updateBalanceDisplay();
        
        // Visual feedback
        if (state.balance > prevBalance) {
            balanceDisplay.classList.add('balance-add');
            setTimeout(() => balanceDisplay.classList.remove('balance-add'), 500);
        } else if (state.balance < prevBalance) {
            balanceDisplay.classList.add('balance-remove');
            setTimeout(() => balanceDisplay.classList.remove('balance-remove'), 500);
        }
    }

    function updateBalanceDisplay() {
        balanceDisplay.textContent = `$${state.balance.toFixed(2)}`;
    }

    function switchView(viewId) {
        state.activeView = viewId;
        document.querySelectorAll('.game-view').forEach(view => view.classList.add('hidden'));
        document.getElementById(viewId).classList.remove('hidden');
        navLinks.forEach(link => {
            link.classList.toggle('active', link.dataset.view === viewId);
        });
        const gameName = document.querySelector(`.nav-link[data-view="${viewId}"] span`).textContent;
        activeGameTitle.textContent = gameName;
    }

    // --- CHAT ---
    function addChatMessage(username, message, typeClass) {
        const msgEl = document.createElement('div');
        msgEl.classList.add('chat-message');
        if(typeClass) msgEl.classList.add(typeClass);

        // Sanitize message to prevent HTML injection
        const sanitizedMessage = message.replace(/</g, "&lt;").replace(/>/g, "&gt;");
        
        msgEl.innerHTML = `<span>${username}:</span> ${sanitizedMessage}`;
        chatMessages.appendChild(msgEl);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function sendChatMessage() {
        const msg = chatInput.value.trim();
        if (msg) {
            ws.send(JSON.stringify({
                type: 'chat',
                username: state.username,
                message: msg
            }));
            chatInput.value = '';
        }
    }


    // --- EVENT LISTENERS ---
    logoutButton.addEventListener('click', logout);
    navLinks.forEach(link => link.addEventListener('click', () => switchView(link.dataset.view)));
    chatSendBtn.addEventListener('click', sendChatMessage);
    chatInput.addEventListener('keyup', (e) => {
        if (e.key === 'Enter') sendChatMessage();
    });

    // Auth Listeners
    showRegisterBtn.addEventListener('click', (e) => {
        e.preventDefault();
        loginView.classList.add('hidden');
        registerView.classList.remove('hidden');
        authError.classList.add('hidden');
    });

    showLoginBtn.addEventListener('click', (e) => {
        e.preventDefault();
        registerView.classList.add('hidden');
        loginView.classList.remove('hidden');
        authError.classList.add('hidden');
    });

    registerButton.addEventListener('click', async () => {
        const username = document.getElementById('register-username').value;
        const password = document.getElementById('register-password').value;
        const response = await fetch('/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, password })
        });
        const data = await response.json();
        if (response.ok) {
            // Automatically log them in after successful registration
            showLoginBtn.click();
            document.getElementById('login-username').value = username;
            document.getElementById('login-password').value = password;
            loginButton.click();
        } else {
            authError.textContent = data.message;
            authError.classList.remove('hidden');
        }
    });

     loginButton.addEventListener('click', async () => {
        const username = document.getElementById('login-username').value;
        const password = document.getElementById('login-password').value;
        const response = await fetch('/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, password })
        });
        const data = await response.json();
        if (response.ok) {
            successfulLogin(data);
        } else {
            authError.textContent = data.message;
            authError.classList.remove('hidden');
        }
    });

    // =================================================================================
    // --- GAME LOGIC (CLIENT-SIDE DISPLAY ONLY) ---
    // =================================================================================
    
    function initAllGames() {
        // Crash is now handled by the server message listener
        // initRoulette(); is just for display now
    }

    // --- CRASH (Display Logic) ---
    function updateCrashView(data) {
        const chart = document.getElementById('crash-chart');
        const multiplierDisplay = document.getElementById('crash-multiplier');
        
        if (data.status === 'running') {
            chart.classList.remove('crashed');
            multiplierDisplay.textContent = `${data.multiplier.toFixed(2)}x`;
            multiplierDisplay.style.color = 'white';
        } else if (data.status === 'crashed') {
            chart.classList.add('crashed');
            multiplierDisplay.textContent = `CRASH @ ${data.multiplier.toFixed(2)}x`;
        } else if (data.status === 'waiting') {
            chart.classList.remove('crashed');
            multiplierDisplay.textContent = 'Waiting...';
            multiplierDisplay.style.color = 'var(--text-secondary)';
        }
    }

    // --- ROULETTE (Display Logic) ---
    function generateRouletteWheel() {
        const wheel = document.getElementById('roulette-wheel');
        if (!wheel) return;
        
        const numbers = [0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30, 8, 23, 10, 5, 24, 16, 33, 1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26];
        const redNumbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];
        const numSegments = numbers.length;
        const angleStep = 360 / numSegments;

        let svgContent = '';
        for (let i = 0; i < numSegments; i++) {
            const angle = i * angleStep;
            const number = numbers[i];
            
            let fill;
            if (number === 0) {
                fill = '#00ff85'; // Green
            } else if (redNumbers.includes(number)) {
                fill = '#ff4757'; // Red
            } else {
                fill = '#232632'; // Black
            }

            const startAngle = angle - (angleStep / 2);
            const endAngle = angle + (angleStep / 2);

            // Create wedge path
            const start = polarToCartesian(100, 100, 90, endAngle);
            const end = polarToCartesian(100, 100, 90, startAngle);
            const largeArcFlag = endAngle - startAngle <= 180 ? "0" : "1";
            const d = [
                "M", 100, 100,
                "L", start.x, start.y,
                "A", 90, 90, 0, largeArcFlag, 0, end.x, end.y,
                "Z"
            ].join(" ");
            svgContent += `<path d="${d}" fill="${fill}" stroke="#3c4153" stroke-width="0.5" />`;

            // Add number text
            const textPos = polarToCartesian(100, 100, 80, angle);
            svgContent += `<text x="${textPos.x}" y="${textPos.y}" font-size="6" fill="white" font-weight="bold" text-anchor="middle" alignment-baseline="middle" transform="rotate(${angle + 90}, ${textPos.x}, ${textPos.y})">${number}</text>`;
        }
        wheel.innerHTML = svgContent;
    }
    
    function polarToCartesian(centerX, centerY, radius, angleInDegrees) {
        var angleInRadians = (angleInDegrees-90) * Math.PI / 180.0;
        return {
            x: centerX + (radius * Math.cos(angleInRadians)),
            y: centerY + (radius * Math.sin(angleInRadians))
        };
    }
    
    // --- INITIALIZE THE APP ---
    init();
});
